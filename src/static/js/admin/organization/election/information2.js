// Generated by CoffeeScript 1.6.2
var informationForm,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

informationForm = null;

define(function(require) {
  var $, AjaxLink, Button, DateTimeRangeInput, InformationForm, LinkModal, TextInput, ZeroClipboard;

  $ = require('jquery');
  TextInput = require('ui/text-input');
  DateTimeRangeInput = require('ui/datetime-range-input');
  Button = require('ui/button');
  AjaxLink = require('ajax-link');
  ZeroClipboard = require('ZeroClipboard');
  InformationForm = (function() {
    function InformationForm() {
      this.setResultDelay = __bind(this.setResultDelay, this);
      this.getResultDelay = __bind(this.getResultDelay, this);
      this.resetSubmitBtn = __bind(this.resetSubmitBtn, this);
      this.sync = __bind(this.sync, this);
      this.setFromJSON = __bind(this.setFromJSON, this);
      this.toJSON = __bind(this.toJSON, this);
      var item, rangeOptions, _i, _len, _ref,
        _this = this;

      this.id = "";
      this.name = new TextInput($('#name'), {
        required: true,
        controlGroup: $('#name').parent().parent()
      });
      rangeOptions = {
        language: 'en',
        pickTime: true,
        pick12HourFormat: true,
        pickSeconds: false,
        required: true,
        pastAllowed: false,
        controlGroup: $('#start-date-time').parent().parent()
      };
      this.votingTime = new DateTimeRangeInput($('#start-date-time'), $('#end-date-time'), rangeOptions);
      this.resultDelay = $('#result-delay');
      this.universal = $('#universal-election');
      this.hidden = $('#hidden-election');
      this.linkModal = new LinkModal();
      $('#election-submit').click(this.sync);
      this.submitBtn = new Button($('#election-submit'));
      this._link = new AjaxLink('/admin/organization/election/information', {
        postView: this.submitBtn
      });
      this.votingTime.on('changeDate', function(e) {
        return _this.resetSubmitBtn();
      });
      _ref = [this.name, this.resultDelay, this.universal, this.hidden];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.change(this.resetSubmitBtn);
      }
    }

    InformationForm.prototype.toJSON = function() {
      var json, key, value;

      json = {
        id: this.id,
        name: this.name.getVal(),
        times: this.votingTime.toJSON(),
        result_delay: this.getResultDelay(),
        universal: this.universal.prop('checked'),
        hidden: this.hidden.prop('checked')
      };
      for (key in json) {
        value = json[key];
        if (value === null) {
          return null;
        }
      }
      return json;
    };

    InformationForm.prototype.setFromJSON = function(json) {
      console.log(json);
      this.id = json.id;
      this.name.setVal(json.name);
      this.votingTime.setFromJSON(json.times);
      this.setResultDelay(json.result_delay);
      this.universal.prop('checked', json.universal);
      return this.hidden.prop('checked', json.hidden);
    };

    InformationForm.prototype.sync = function() {
      var json;

      json = this.toJSON();
      if (this.submitBtn.disabled() || !json) {
        return;
      }
      return this._link.post(json, this.setFromJSON);
    };

    InformationForm.prototype.resetSubmitBtn = function() {
      this.submitBtn.setType('primary');
      if (this.id) {
        this.submitBtn.setText('Save Details');
        return this.submitBtn.enable();
      }
    };

    InformationForm.prototype.getResultDelay = function() {
      return parseInt(this.resultDelay.val());
    };

    InformationForm.prototype.setResultDelay = function(delay) {
      if (!$("#result-delay option[value=" + delay + "]")) {
        this.resultDelay.append("<option id='custom' value='" + delay + "'>" + delay + "</option>");
      }
      return this.resultDelay.val(delay).change();
    };

    return InformationForm;

  })();
  LinkModal = (function() {
    function LinkModal() {
      this.el = $('#modal-election-link');
      this.link = $('#modal-election-link-text');
      this.linkHref = '';
      this.copyLink = $('#modal-election-link-copy');
      this.clip = new ZeroClipboard(this.copyLink, {
        moviePath: "/static/js/shared/ZeroClipboard.swf",
        text: 'Hello!'
      });
      this.clip.on('complete', function(client, args) {
        return alert("Copied text to clipboard: " + args.text);
      });
    }

    LinkModal.prototype.load = function(id) {
      var host, linkText;

      host = window.location.host;
      this.linkHref = "http://" + host + "/vote/cast-ballot?id=" + id;
      linkText = $('<a>', {
        'href': this.linkHref
      }).text(this.linkHref);
      this.link.text(this.linkHref);
      this.copyLink.attr('data-clipboard-text', this.linkHref);
      return this.clip = new ZeroClipboard(this.copyLink, {
        moviePath: "/static/js/shared/ZeroClipboard.swf",
        text: 'Hello!'
      });
    };

    LinkModal.prototype.show = function() {
      return this.el.modal('show');
    };

    return LinkModal;

  })();
  informationForm = new InformationForm();
  return console.log(informationForm);
});
